using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Host;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using HtmlAgilityPack;
using Microsoft.Data.SqlClient;
using Dapper;
using Dapper.Contrib.Extensions;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.ComponentModel.Design;
using Microsoft.AspNetCore.Mvc;
using System.Threading;

namespace GetCertLinks_Function_TImer
{
    public class Function1


    {
        [FunctionName("Function1")]
        public void Run([TimerTrigger("0 */30 * * * *")] TimerInfo myTimer, ILogger log)
        {


            log.LogInformation($"C# Timer trigger function executed at: {DateTime.Now}");

            var BASE_URL = "<url>";
            var ENDPOINT_STAGE_ONE = "<url>/endpoint1";
            var ENDPOINT_STAGE_TWO = "<url>/endpoint2";

            var sql_password = Environment.GetEnvironmentVariable("SQL_PASSWORD");

            var client = new HttpClient();


            // This section gets reference numbers from a sql table and joins to certificate link table to check for unmatched rows
            // it also will create a list of current records we have which have invalid certificate records

            // create list for new unmatched records
            var list_ref_nums = new List<string>();

            // create list of existing records with No Certificate Available values
            var list_invalid_certlinks = new List<string>();

            //create list for any records which have no certificate link available but AHRI now has an updated link available
            var list_now_available = new List<string>();


            SqlConnection conn1;
            var connection_string1 = @$"<connstring>";

            conn1 = new SqlConnection(connection_string1);
            conn1.Open();

            var sql_query = <sqlquery>;

            var command = new SqlCommand(sql_query, conn1);

            var results = command.ExecuteReader();

            while (results.Read())
                list_ref_nums.Add(results[0].ToString());

            results.Close();

            var sql_invalid_certlinks = "<sqlquery>";

            var command_invalid_certlinks = new SqlCommand(sql_invalid_certlinks, conn1);

            var results_invalid_certlinks = command_invalid_certlinks.ExecuteReader();
             
            while (results_invalid_certlinks.Read())
                list_invalid_certlinks.Add(results_invalid_certlinks[0].ToString());

            results_invalid_certlinks.Close();

            conn1.Close();

            log.LogInformation("Obtained records from SQL DB and populated lists.");

            // this function will take a list of records generated by the first sql query and attempt to validate that the website has a valid certificate link available for each
            // if it does, it will add the record to the database with the valid link
            // if it does not, it will add the record to the database with a certificate link value of "No Certificate Found"

            void AddNewRecords(List<String> new_records)
            {
                foreach (var ref_num in new_records)
                {
                    try
                    {

                        var newPost = new ReqBodyStageOne()
                        {
                            ModelNumber = ref_num,
                            isSearchByRefId = true
                        };

                        var newPostJson = JsonConvert.SerializeObject(newPost);
                        var payload = new StringContent(newPostJson, Encoding.UTF8, "application/json");

                        var result = client.PostAsync(BASE_URL + ENDPOINT_STAGE_ONE, payload).Result.Content.ReadAsStringAsync().Result;

                        // there were several thousand records which did not have valid certicates avaialable on the website
                        // this condition will check if the response DOES NOT contain the model number (is basically blank) and if so,
                        // will insert a record into the db for that model number and a "No Certificate Found" value for the certificate link.
             
                        if (!result.Contains(newPost.ModelNumber))
                        {
                            var cert_link = new CertUrl()
                            {
                                ReferenceNumber = ref_num,
                                CertificateLink = "No Certificate Found"
                            };

                            // insert reference number and certificate link object into the cert link table
                            SqlConnection conn2;
                            var connection_string2 = @$"<connstring2>";

                            conn2 = new SqlConnection(connection_string2);
                            conn2.Open();
                            conn2.Insert(cert_link);
                            conn2.Close();

                        };

                       
                        // turns raw response into html document -  will access the href text from the javascript.onselect function using xpath
                        var S1_html_doc = new HtmlDocument();
                        S1_html_doc.LoadHtml(result);

                        var S1_tag = S1_html_doc.DocumentNode.SelectSingleNode("//table/tbody/tr/td[1]/a");
                        string S1_href_text = "";


                        if (S1_tag == null)
                        {
                            S1_href_text = "999999999";
                        }
                        else
                        {
                            S1_href_text = S1_tag.Attributes["href"].Value.ToString();

                            // remove the ' ' around the last value, remove the parenthesis from around the desired extracted values, put values in indexible data structure
                            S1_href_text = S1_href_text.Replace("'", "");

                            var substring_start = S1_href_text.IndexOf("(") + 1;
                            var substring_end = S1_href_text.IndexOf(")") - 1;

                            var len = substring_end - substring_start + 1;

                            var stage_two_params = S1_href_text.Substring(substring_start, len).Split(",").ToList();

                            var hdnProgramId = stage_two_params[1];
                            var productType_id = stage_two_params[2];
                            var hdnReferenceId = stage_two_params[0];


                            // checks to see if product type id starts with a "number".
                            // the cert link requires this parameter if it is numerical but does not send the parameter value if it's text
                            string[] arr_product_type_id_check = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };

                            if (arr_product_type_id_check.Contains(productType_id[0].ToString()))
                            {
                            }
                            else
                                productType_id = "";


                            // create request for the 2nd enpoint call - using json object to add json body argument
                            // only thing that changes in this are the 3 parameters in formdata           

                            var newPost2 = new
                            {
                                draw = 1,
                                columns = new[] {
                         new {
                            name = "ReferenceId",
                            searchable = true,
                            orderable = true,
                            search = new {
                                value = "",
                                regex = false
                            }
                        }
                                    },
                                order = new[] {
                        new {
                            column = 0,
                            dir = "asc"
                        }
                                    },
                                start = 0,
                                length = 1,
                                search = new
                                {
                                    value = "",
                                    regex = false
                                },
                                formData = $"hdnProgramId={hdnProgramId}&hdnSearchTypeId=7&productType_id={productType_id}&hdnReferenceId={hdnReferenceId}"
                            };

                            var newPostJson2 = JsonConvert.SerializeObject(newPost2);
                            var payload2 = new StringContent(newPostJson2, Encoding.UTF8, "application/json");

                            var result2 = client.PostAsync(BASE_URL + ENDPOINT_STAGE_TWO, payload2).Result.Content.ReadAsStringAsync().Result;

                            var S2_conversion = JsonConvert.DeserializeObject<StageTwoResponse>(result2);

                            // get the a tag (href) from the response
                            var S2_tag = S2_conversion.data[0][0];

                            // make the response an html doc type to get the href value like in stage one and combine with BASE_URL to make the cert link.
                            var S2_htmlDoc = new HtmlDocument();
                            S2_htmlDoc.LoadHtml(S2_tag.ToString());
                            var S2_htmlBody = S2_htmlDoc.DocumentNode.SelectSingleNode("//a");
                            var S2_href_text = S2_htmlBody.Attributes["href"].Value.ToString();


                            var cert_link = new CertUrl()
                            {
                                ReferenceNumber = ref_num,
                                CertificateLink = BASE_URL + S2_href_text
                            };


                            // insert reference number and certificate link object into the cert link table
                            SqlConnection conn2;
                            var connection_string2 = @$<connstring2>";

                            conn2 = new SqlConnection(connection_string2);
                            conn2.Open();
                            conn2.Insert(cert_link);
                            conn2.Close();

                        }


                    }

                    // logs error message for violation of primary key constraint, if other error - sends post request to webhook setup for teams channel
                    catch (Exception ex)
                    {
                        if (ex.Message.Contains("Violation of PRIMARY KEY constraint"))
                            return;
                        else
                            log.LogInformation(ex.Message);
                        var teams_post = new
                        {

                            title = "Certlink Azure Function Error",
                            text = $"{ex.Message}"
                        };

                        var teams_post_json = JsonConvert.SerializeObject(teams_post);
                        var teams_payload = new StringContent(teams_post_json, Encoding.UTF8, "application/json");

                        var teams_result = client.PostAsync("<url>",
                            teams_payload).Result.Content.ReadAsStringAsync().Result;

                    }


                };               

            };

            //// this function will loop through the existing records with invalid certificate link values.
            //// it will make the initial http request to the ahri site and if the response contains the model number, it will add the record to list_now_available
            //// it will also delete the record from the ahri certlink sql table.

            void CheckForUpdates(List<String> invalid_refs)
            {
                log.LogInformation($"Checking {invalid_refs.Count} records for updates.");

                foreach (var record in invalid_refs)
                {

                    var newPost = new ReqBodyStageOne()
                    {
                        ModelNumber = record,
                        isSearchByRefId = true
                    };

                    var newPostJson = JsonConvert.SerializeObject(newPost);
                    var payload = new StringContent(newPostJson, Encoding.UTF8, "application/json");
                    var result = client.PostAsync(BASE_URL + ENDPOINT_STAGE_ONE, payload).Result.Content.ReadAsStringAsync().Result;

                    if (result.Contains(newPost.ModelNumber))
                    {
                        list_now_available.Add(record);

                        conn1.Open();

                        var sql_delete = $"<query>";

                        var command_delete = new SqlCommand(sql_delete, conn1);

                        command_delete.ExecuteReader();
                        
                        conn1.Close();

                    }
                    else
                    {
                        conn1.Open();

                        var sql_modify  = $"<sqlquery>";

                        var command_modify = new SqlCommand(sql_modify, conn1);

                        command_modify.ExecuteReader();
                        
                        conn1.Close();

                    }


                }
              
            }


            // add new unmatched records to ahri certlink table
            if (list_ref_nums.Count > 0)
            {
                log.LogInformation($"{list_ref_nums.Count} umatched records found. Adding to DB... ");
                AddNewRecords(list_ref_nums);
            }
            else
                log.LogInformation("No unmatched records found.");


            // check existing records for updated cert links
            if (list_invalid_certlinks.Count > 0)
                CheckForUpdates(list_invalid_certlinks);
            else
                log.LogInformation("Finished checking existing invalid cert link records for today.");


            // add any updated records to the database
            if (list_now_available.Count > 0)
            {
                log.LogInformation($"Adding {list_now_available.Count} updated records to database...");
                AddNewRecords(list_now_available);
            }
            else
                log.LogInformation("No new updates for invalid cert link records avaialble.");



            log.LogInformation("Function Completed Run");

        }  
        
    }


}




public class ReqBodyStageOne
{
    public string ModelNumber { get; set; }
    public bool isSearchByRefId { get; set; }
}

public class StageTwoResponse
{
    public int draw { get; set; }
    public int recordsTotal { get; set; }
    public int recordsFiltered { get; set; }
    public List<List<object>> data { get; set; }
    public List<List<object>> dataRaw { get; set; }
    public object error { get; set; }
}

[Table("[Schema].[TableName]")]
public class CertUrl
{
    public string ReferenceNumber { get; set; }
    public string CertificateLink { get; set; }
}
